//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g 2018-12-10 11:35:49

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


#pragma warning disable 3021
#pragma warning disable 0414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class StateMachineTransitionLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__28=28;
	public const int T__29=29;
	public const int AND=4;
	public const int ARGTYPE_DELEGATE=5;
	public const int ARGTYPE_FLOAT=6;
	public const int ARGTYPE_INT=7;
	public const int FLOAT=8;
	public const int ID=9;
	public const int INT=10;
	public const int LEFT_CBRACKET=11;
	public const int LEFT_PAREN=12;
	public const int NEWLINE=13;
	public const int NOT=14;
	public const int OR=15;
	public const int PROG=16;
	public const int PROGEXPR=17;
	public const int PROGEXPR_RESTART=18;
	public const int RIGHT_CBRACKET=19;
	public const int RIGHT_PAREN=20;
	public const int VARARGS=21;
	public const int VARDECL=22;
	public const int VARDECLBLOCK=23;
	public const int VARNAME=24;
	public const int VARTYPE=25;
	public const int WS=26;
	public const int XOR=27;

    // delegates
    // delegators

	public StateMachineTransitionLexer()
	{
		OnCreated();
	}

	public StateMachineTransitionLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public StateMachineTransitionLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__28() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__28() {}

    // $ANTLR start "T__28"
    [GrammarRule("T__28")]
    private void mT__28()
    {
    	EnterRule_T__28();
    	EnterRule("T__28", 1);
    	TraceIn("T__28", 1);
    		try
    		{
    		int _type = T__28;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:12:7: ( ',' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:12:9: ','
    		{
    		DebugLocation(12, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__28", 1);
    		LeaveRule("T__28", 1);
    		LeaveRule_T__28();
        }
    }
    // $ANTLR end "T__28"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__29() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__29() {}

    // $ANTLR start "T__29"
    [GrammarRule("T__29")]
    private void mT__29()
    {
    	EnterRule_T__29();
    	EnterRule("T__29", 2);
    	TraceIn("T__29", 2);
    		try
    		{
    		int _type = T__29;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:13:7: ( ';' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:13:9: ';'
    		{
    		DebugLocation(13, 9);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__29", 2);
    		LeaveRule("T__29", 2);
    		LeaveRule_T__29();
        }
    }
    // $ANTLR end "T__29"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LEFT_CBRACKET() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LEFT_CBRACKET() {}

    // $ANTLR start "LEFT_CBRACKET"
    [GrammarRule("LEFT_CBRACKET")]
    private void mLEFT_CBRACKET()
    {
    	EnterRule_LEFT_CBRACKET();
    	EnterRule("LEFT_CBRACKET", 3);
    	TraceIn("LEFT_CBRACKET", 3);
    		try
    		{
    		int _type = LEFT_CBRACKET;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:94:15: ( '{' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:94:17: '{'
    		{
    		DebugLocation(94, 17);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LEFT_CBRACKET", 3);
    		LeaveRule("LEFT_CBRACKET", 3);
    		LeaveRule_LEFT_CBRACKET();
        }
    }
    // $ANTLR end "LEFT_CBRACKET"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_RIGHT_CBRACKET() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_RIGHT_CBRACKET() {}

    // $ANTLR start "RIGHT_CBRACKET"
    [GrammarRule("RIGHT_CBRACKET")]
    private void mRIGHT_CBRACKET()
    {
    	EnterRule_RIGHT_CBRACKET();
    	EnterRule("RIGHT_CBRACKET", 4);
    	TraceIn("RIGHT_CBRACKET", 4);
    		try
    		{
    		int _type = RIGHT_CBRACKET;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:95:16: ( '}' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:95:18: '}'
    		{
    		DebugLocation(95, 18);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("RIGHT_CBRACKET", 4);
    		LeaveRule("RIGHT_CBRACKET", 4);
    		LeaveRule_RIGHT_CBRACKET();
        }
    }
    // $ANTLR end "RIGHT_CBRACKET"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_XOR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_XOR() {}

    // $ANTLR start "XOR"
    [GrammarRule("XOR")]
    private void mXOR()
    {
    	EnterRule_XOR();
    	EnterRule("XOR", 5);
    	TraceIn("XOR", 5);
    		try
    		{
    		int _type = XOR;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:96:5: ( '^' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:96:7: '^'
    		{
    		DebugLocation(96, 7);
    		Match('^'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("XOR", 5);
    		LeaveRule("XOR", 5);
    		LeaveRule_XOR();
        }
    }
    // $ANTLR end "XOR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_AND() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_AND() {}

    // $ANTLR start "AND"
    [GrammarRule("AND")]
    private void mAND()
    {
    	EnterRule_AND();
    	EnterRule("AND", 6);
    	TraceIn("AND", 6);
    		try
    		{
    		int _type = AND;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:97:5: ( '&' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:97:7: '&'
    		{
    		DebugLocation(97, 7);
    		Match('&'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("AND", 6);
    		LeaveRule("AND", 6);
    		LeaveRule_AND();
        }
    }
    // $ANTLR end "AND"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OR() {}

    // $ANTLR start "OR"
    [GrammarRule("OR")]
    private void mOR()
    {
    	EnterRule_OR();
    	EnterRule("OR", 7);
    	TraceIn("OR", 7);
    		try
    		{
    		int _type = OR;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:98:4: ( '|' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:98:6: '|'
    		{
    		DebugLocation(98, 6);
    		Match('|'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OR", 7);
    		LeaveRule("OR", 7);
    		LeaveRule_OR();
        }
    }
    // $ANTLR end "OR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LEFT_PAREN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LEFT_PAREN() {}

    // $ANTLR start "LEFT_PAREN"
    [GrammarRule("LEFT_PAREN")]
    private void mLEFT_PAREN()
    {
    	EnterRule_LEFT_PAREN();
    	EnterRule("LEFT_PAREN", 8);
    	TraceIn("LEFT_PAREN", 8);
    		try
    		{
    		int _type = LEFT_PAREN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:99:13: ( '(' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:99:15: '('
    		{
    		DebugLocation(99, 15);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LEFT_PAREN", 8);
    		LeaveRule("LEFT_PAREN", 8);
    		LeaveRule_LEFT_PAREN();
        }
    }
    // $ANTLR end "LEFT_PAREN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_RIGHT_PAREN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_RIGHT_PAREN() {}

    // $ANTLR start "RIGHT_PAREN"
    [GrammarRule("RIGHT_PAREN")]
    private void mRIGHT_PAREN()
    {
    	EnterRule_RIGHT_PAREN();
    	EnterRule("RIGHT_PAREN", 9);
    	TraceIn("RIGHT_PAREN", 9);
    		try
    		{
    		int _type = RIGHT_PAREN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:100:14: ( ')' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:100:16: ')'
    		{
    		DebugLocation(100, 16);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("RIGHT_PAREN", 9);
    		LeaveRule("RIGHT_PAREN", 9);
    		LeaveRule_RIGHT_PAREN();
        }
    }
    // $ANTLR end "RIGHT_PAREN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NOT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NOT() {}

    // $ANTLR start "NOT"
    [GrammarRule("NOT")]
    private void mNOT()
    {
    	EnterRule_NOT();
    	EnterRule("NOT", 10);
    	TraceIn("NOT", 10);
    		try
    		{
    		int _type = NOT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:101:6: ( '!' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:101:8: '!'
    		{
    		DebugLocation(101, 8);
    		Match('!'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NOT", 10);
    		LeaveRule("NOT", 10);
    		LeaveRule_NOT();
        }
    }
    // $ANTLR end "NOT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 11);
    	TraceIn("ID", 11);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:102:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:102:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+
    		{
    		DebugLocation(102, 7);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:102:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+
    		int cnt1=0;
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if (((LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch (alt1)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:
    				{
    				DebugLocation(102, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt1 >= 1)
    					goto loop1;

    				EarlyExitException eee1 = new EarlyExitException( 1, input );
    				DebugRecognitionException(eee1);
    				throw eee1;
    			}
    			cnt1++;
    		}
    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 11);
    		LeaveRule("ID", 11);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FLOAT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FLOAT() {}

    // $ANTLR start "FLOAT"
    [GrammarRule("FLOAT")]
    private void mFLOAT()
    {
    	EnterRule_FLOAT();
    	EnterRule("FLOAT", 12);
    	TraceIn("FLOAT", 12);
    		try
    		{
    		int _type = FLOAT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:103:7: ( INT '.' INT )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:103:10: INT '.' INT
    		{
    		DebugLocation(103, 10);
    		mINT(); 
    		DebugLocation(103, 14);
    		Match('.'); 
    		DebugLocation(103, 18);
    		mINT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FLOAT", 12);
    		LeaveRule("FLOAT", 12);
    		LeaveRule_FLOAT();
        }
    }
    // $ANTLR end "FLOAT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 13);
    	TraceIn("INT", 13);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:104:8: ( ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:104:11: ( '0' .. '9' )+
    		{
    		DebugLocation(104, 11);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:104:11: ( '0' .. '9' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_0 = input.LA(1);

    			if (((LA2_0>='0' && LA2_0<='9')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:
    				{
    				DebugLocation(104, 11);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 13);
    		LeaveRule("INT", 13);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NEWLINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NEWLINE() {}

    // $ANTLR start "NEWLINE"
    [GrammarRule("NEWLINE")]
    private void mNEWLINE()
    {
    	EnterRule_NEWLINE();
    	EnterRule("NEWLINE", 14);
    	TraceIn("NEWLINE", 14);
    		try
    		{
    		int _type = NEWLINE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:105:9: ( ( '\\r' )? '\\n' )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:105:11: ( '\\r' )? '\\n'
    		{
    		DebugLocation(105, 11);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:105:11: ( '\\r' )?
    		int alt3=2;
    		try { DebugEnterSubRule(3);
    		try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    		int LA3_0 = input.LA(1);

    		if ((LA3_0=='\r'))
    		{
    			alt3 = 1;
    		}
    		} finally { DebugExitDecision(3); }
    		switch (alt3)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:105:11: '\\r'
    			{
    			DebugLocation(105, 11);
    			Match('\r'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(3); }

    		DebugLocation(105, 17);
    		Match('\n'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NEWLINE", 14);
    		LeaveRule("NEWLINE", 14);
    		LeaveRule_NEWLINE();
        }
    }
    // $ANTLR end "NEWLINE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 15);
    	TraceIn("WS", 15);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:106:5: ( ( ' ' | '\\t' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:106:7: ( ' ' | '\\t' )+
    		{
    		DebugLocation(106, 7);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:106:7: ( ' ' | '\\t' )+
    		int cnt4=0;
    		try { DebugEnterSubRule(4);
    		while (true)
    		{
    			int alt4=2;
    			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    			int LA4_0 = input.LA(1);

    			if ((LA4_0=='\t'||LA4_0==' '))
    			{
    				alt4 = 1;
    			}


    			} finally { DebugExitDecision(4); }
    			switch (alt4)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:
    				{
    				DebugLocation(106, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt4 >= 1)
    					goto loop4;

    				EarlyExitException eee4 = new EarlyExitException( 4, input );
    				DebugRecognitionException(eee4);
    				throw eee4;
    			}
    			cnt4++;
    		}
    		loop4:
    			;

    		} finally { DebugExitSubRule(4); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 15);
    		LeaveRule("WS", 15);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    public override void mTokens()
    {
    	// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:8: ( T__28 | T__29 | LEFT_CBRACKET | RIGHT_CBRACKET | XOR | AND | OR | LEFT_PAREN | RIGHT_PAREN | NOT | ID | FLOAT | INT | NEWLINE | WS )
    	int alt5=15;
    	try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    	try
    	{
    		alt5 = dfa5.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(5); }
    	switch (alt5)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:10: T__28
    		{
    		DebugLocation(1, 10);
    		mT__28(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:16: T__29
    		{
    		DebugLocation(1, 16);
    		mT__29(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:22: LEFT_CBRACKET
    		{
    		DebugLocation(1, 22);
    		mLEFT_CBRACKET(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:36: RIGHT_CBRACKET
    		{
    		DebugLocation(1, 36);
    		mRIGHT_CBRACKET(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:51: XOR
    		{
    		DebugLocation(1, 51);
    		mXOR(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:55: AND
    		{
    		DebugLocation(1, 55);
    		mAND(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:59: OR
    		{
    		DebugLocation(1, 59);
    		mOR(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:62: LEFT_PAREN
    		{
    		DebugLocation(1, 62);
    		mLEFT_PAREN(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:73: RIGHT_PAREN
    		{
    		DebugLocation(1, 73);
    		mRIGHT_PAREN(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:85: NOT
    		{
    		DebugLocation(1, 85);
    		mNOT(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:89: ID
    		{
    		DebugLocation(1, 89);
    		mID(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:92: FLOAT
    		{
    		DebugLocation(1, 92);
    		mFLOAT(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:98: INT
    		{
    		DebugLocation(1, 98);
    		mINT(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:102: NEWLINE
    		{
    		DebugLocation(1, 102);
    		mNEWLINE(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// C:\\Users\\zeano\\Dropbox\\Neo\\StateMachine\\Internal\\StateMachineTransition.g:1:110: WS
    		{
    		DebugLocation(1, 110);
    		mWS(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA5 dfa5;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5(this);
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\xC\xFFFF\x1\xF\x4\xFFFF";
		private const string DFA5_eofS =
			"\x11\xFFFF";
		private const string DFA5_minS =
			"\x1\x9\xB\xFFFF\x1\x2E\x4\xFFFF";
		private const string DFA5_maxS =
			"\x1\x7D\xB\xFFFF\x1\x39\x4\xFFFF";
		private const string DFA5_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA"+
			"\x1\xB\x1\xFFFF\x1\xE\x1\xF\x1\xD\x1\xC";
		private const string DFA5_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\xE\x1\xD\x2\xFFFF\x1\xD\x12\xFFFF\x1\xE\x1\xA\x4\xFFFF\x1\x6\x1"+
				"\xFFFF\x1\x8\x1\x9\x2\xFFFF\x1\x1\x3\xFFFF\xA\xC\x1\xFFFF\x1\x2\x5\xFFFF"+
				"\x1A\xB\x3\xFFFF\x1\x5\x1\xB\x1\xFFFF\x1A\xB\x1\x3\x1\x7\x1\x4",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x10\x1\xFFFF\xA\xC",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__28 | T__29 | LEFT_CBRACKET | RIGHT_CBRACKET | XOR | AND | OR | LEFT_PAREN | RIGHT_PAREN | NOT | ID | FLOAT | INT | NEWLINE | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
